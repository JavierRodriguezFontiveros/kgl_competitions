model = keras.Sequential([
    keras.layers.Conv2D(64, (3,3), input_shape=(32,32,3)),
    keras.layers.MaxPooling2D(2,2),
    keras.layers.Conv2D(32, (3,3)),
    # keras.layers.MaxPooling2D(2,2),
    # keras.layers.Conv2D(16, (3,3)),
    keras.layers.MaxPooling2D(2,2),
    keras.layers.Flatten(),
    keras.layers.Dense(32),
    keras.layers.Dense(16),
    keras.layers.Dense(6, activation="softmax")
])

history = model.fit(X_train,
                    y_train,
                    batch_size = 128,
                    epochs = 20,
                    validation_split=0.1)

df_hist = pd.DataFrame(history.history, index=np.arange(1,21))
plt.plot(df_hist['val_loss'], label="val loss")
plt.plot(df_hist['loss'], label="train loss")
plt.title("Training CNN")
plt.xlabel("Training CNN")
plt.ylabel("Training CNN")
plt.xticks(np.arange(1,21))
plt.legend()






model = keras.Sequential([
    keras.layers.Conv2D(64, (3,3), input_shape=(64,64,3)),
    keras.layers.MaxPooling2D(2,2),
    keras.layers.Conv2D(32, (3,3)),
    keras.layers.MaxPooling2D(2,2),
    keras.layers.Conv2D(32, (3,3)),
    keras.layers.MaxPooling2D(2,2),
    keras.layers.Flatten(),
    keras.layers.Dense(64),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(32),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(6, activation="softmax")
])

history = model.fit(X_train,
                    y_train,
                    batch_size = 128,
                    epochs = 20,
                    validation_split=0.1,
                    callbacks=[early_stopping])





from sklearn.metrics import classification_report
print(classification_report(y_test, pred_labels))